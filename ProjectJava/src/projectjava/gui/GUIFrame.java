/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectjava.gui;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import projectjava.dbconnection.DBConnectionService;


/**
 *
 * @author UITCV
 */
public class GUIFrame extends javax.swing.JFrame {

    /**
     * Creates new form GUIFrame
     */
    private Connection connect;
    private ResultSet rs;
    private PreparedStatement stmt;
    DefaultListModel<String> listModel;
    DefaultListModel<String> listModelAns;
    DefaultListModel<String> listModelIma;
    public GUIFrame() {
        initComponents();
        buttonGroup1.add(radioCategory);
        buttonGroup1.add(rbKey);
        cbxFirst.setVisible(false);
        //cbxSecond.setVisible(false);
        txtFKey.setVisible(false);
        try {
            connect = DBConnectionService.getConnection(); 
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void HinhAnh(String str) {
        lbImage.setIcon(null);
        if(str!=null){
            BufferedImage image = null;
            try {
                image = ImageIO.read(new File(str));
            } catch (IOException ex) {
                Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            int x = lbImage.getSize().width;
            int y = lbImage.getSize().height;
            int ix = image.getWidth();
            int iy = image.getHeight();
            int dx = 0;
            int dy = 0;
            if(x / y > ix / iy) {
                dy = y;
                dx = dy * ix / iy;
            } else {
                dx = x;
                dy = dx * iy / ix;
            }
            ImageIcon icon = new ImageIcon(image.getScaledInstance(dx, dy, Image.SCALE_SMOOTH));
            lbImage.setIcon(icon);
        }
        else{
            lbImage.setText("No image");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        radioCategory = new javax.swing.JRadioButton();
        rbKey = new javax.swing.JRadioButton();
        cbxFind = new javax.swing.JComboBox<>();
        cbxFirst = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listQuestion = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        Search = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Answers = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        lbImage = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFKey = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tra cứu thông tin UIT");
        setPreferredSize(new java.awt.Dimension(534, 584));
        setResizable(false);

        radioCategory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        radioCategory.setSelected(true);
        radioCategory.setText("Theo danh mục");
        radioCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCategoryActionPerformed(evt);
            }
        });

        rbKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbKey.setText("Nhập từ khóa");
        rbKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbKeyActionPerformed(evt);
            }
        });

        cbxFind.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxFind.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn mục tìm kiếm", "Môn học", "Giảng viên", "Thông tin Quy chế" }));
        cbxFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFindActionPerformed(evt);
            }
        });

        cbxFirst.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxFirst.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn mục tìm kiếm" }));

        listQuestion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(listQuestion);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Danh sách câu hỏi");

        Search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Search.setText("Tìm kiếm");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Answers.setEditable(false);
        Answers.setColumns(20);
        Answers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Answers.setLineWrap(true);
        Answers.setRows(5);
        Answers.setWrapStyleWord(true);
        jScrollPane2.setViewportView(Answers);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Câu trả lời");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Hình ảnh và Sách");

        txtFKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtFKey.setText("Vui lòng nhập từ khóa");
        txtFKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFKeyMouseClicked(evt);
            }
        });
        txtFKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFKeyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFKeyKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(203, 203, 203))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 427, Short.MAX_VALUE)
                        .addComponent(Search))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(8, 8, 8)
                        .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioCategory)
                                .addGap(48, 48, 48)
                                .addComponent(rbKey))
                            .addComponent(cbxFirst, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxFind, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFKey, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioCategory)
                    .addComponent(rbKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbxFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFindActionPerformed
        // TODO add your handling code here:
        Answers.setText("");
        this.HinhAnh(null);
        //Không chọn gì hết   
        if(cbxFind.getSelectedIndex()==0)
        {
            cbxFirst.setVisible(false);
            this.HinhAnh(null);
            DefaultListModel<String> model = new DefaultListModel<>();
            model.addElement("");
            listQuestion.setModel(model);
        }
        //Chọn giảng viên
        if(cbxFind.getSelectedIndex()==2)
        {
            cbxFirst.setVisible(false);
            String s = "SELECT * FROM GIANG_VIEN";
            try {
                stmt = connect.prepareStatement(s);
                rs = stmt.executeQuery();
                DefaultListModel<String> model = new DefaultListModel<>();
                while(rs.next())
                {
                    model.addElement(rs.getString("CAUHOI"));
                }
                listQuestion.setModel(model);
            } catch (SQLException ex) {
                Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
//                    cbxFirst.setVisible(true);
//                    String [] items = new String[10];
//                    items[0] = "Chọn khoa, bộ môn";
//                    items[1] = "Khoa Công nghệ phần mềm";
//                    items[2] = "Bộ môn Khoa học và kĩ thuật thông tin";
//                    items[3] = "Khoa Hệ thống thông tin";
//                    items[4] = "Khoa Khoa học máy tính";
//                    items[5] = "Khoa Mạng máy tính và truyền thông";
//                    ComboBoxModel cbxModel =  new DefaultComboBoxModel(items);
//                    cbxFirst.setModel(cbxModel);    
        }
        //Chọn môn học
        if(cbxFind.getSelectedIndex()==1)
        {
            cbxFirst.setVisible(false);
            String s = "SELECT * FROM MON_HOC";
            try {
                stmt = connect.prepareStatement(s);
                rs = stmt.executeQuery();
                DefaultListModel<String> model = new DefaultListModel<>();
                while(rs.next())
                {
                    model.addElement(rs.getString("CAUHOI"));
                }
                listQuestion.setModel(model);
            } catch (SQLException ex) {
                Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //Chọn Thông tin quy chế
        if(cbxFind.getSelectedIndex()==3)
        {
            cbxFirst.setVisible(false);
            String s = "SELECT * FROM THONGTIN_QUYCHE";
            try {
                stmt = connect.prepareStatement(s);
                rs = stmt.executeQuery();
                DefaultListModel<String> model = new DefaultListModel<>();
                while(rs.next())
                {
                    model.addElement(rs.getString("CAUHOI"));
                }
                listQuestion.setModel(model);
            } catch (SQLException ex) {
                Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_cbxFindActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here
        if(radioCategory.isSelected()){
            if(cbxFind.getSelectedIndex()==1)
            {
                cbxFirst.setVisible(false);
                String s = "SELECT * FROM MON_HOC";
                try {
                    stmt = connect.prepareStatement(s);
                    rs = stmt.executeQuery();
                    DefaultListModel<String> model = new DefaultListModel<>();
                    DefaultListModel<String> modelim = new DefaultListModel<>();
                    while(rs.next())
                    {
                        model.addElement(rs.getString("TRALOI"));
                        modelim.addElement(rs.getString("HINHANH"));
                    }
                    for(int i=0; i<model.getSize(); i++){
                        if(listQuestion.getSelectedIndex()==i){
                            Answers.setText(model.get(i));
                            this.HinhAnh(modelim.get(i));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            if(cbxFind.getSelectedIndex()==2){
                cbxFirst.setVisible(false);
                String s = "SELECT * FROM GIANG_VIEN";
                try {
                    stmt = connect.prepareStatement(s);
                    rs = stmt.executeQuery();
                    DefaultListModel<String> model = new DefaultListModel<>();
                    DefaultListModel<String> modelim = new DefaultListModel<>();
                    while(rs.next())
                    {
                        model.addElement(rs.getString("TRALOI"));
                        modelim.addElement(rs.getString("HINHANH"));
                    }
                    for(int i=0; i<model.getSize(); i++){
                        if(listQuestion.getSelectedIndex()==i){
                            Answers.setText(model.get(i));
                            this.HinhAnh(modelim.get(i));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            if(cbxFind.getSelectedIndex()==3)
            {
                cbxFirst.setVisible(false);
                String s = "SELECT * FROM THONGTIN_QUYCHE";
                try {
                    stmt = connect.prepareStatement(s);
                    rs = stmt.executeQuery();
                    DefaultListModel<String> model = new DefaultListModel<>();
                    DefaultListModel<String> modelim = new DefaultListModel<>();
                    while(rs.next())
                    {
                        model.addElement(rs.getString("TRALOI"));
                        modelim.addElement(rs.getString("HINHANH"));
                    }
                    for(int i=0; i<model.getSize(); i++){
                        if(listQuestion.getSelectedIndex()==i){
                            Answers.setText(model.get(i));
                            this.HinhAnh(modelim.get(i));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if(rbKey.isSelected()){
            for(int i=0; i<listModel.getSize(); i++){
                if(listQuestion.getSelectedIndex()==i){
                    Answers.setText(listModelAns.get(i));
                    this.HinhAnh(listModelIma.get(i));
                }
            }
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void rbKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbKeyActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(null, "Nhập từ khóa được chọn!");
        txtFKey.setVisible(true);
        cbxFind.setVisible(false);
        cbxFirst.setVisible(false);
        Answers.setText("");
        this.HinhAnh(null);
        DefaultListModel<String> model = new DefaultListModel<>();
        model.addElement("");
        listQuestion.setModel(model);
    }//GEN-LAST:event_rbKeyActionPerformed

    private void radioCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCategoryActionPerformed
        // TODO add your handling code here:
        txtFKey.setVisible(false);
        cbxFind.setVisible(true);
        cbxFind.setSelectedIndex(0);
        Answers.setText("");
        this.HinhAnh(null);
        DefaultListModel<String> model = new DefaultListModel<>();
        model.addElement("");
        listQuestion.setModel(model);
    }//GEN-LAST:event_radioCategoryActionPerformed
    
    private void txtFKeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFKeyMouseClicked
        // TODO add your handling code here:
        txtFKey.setText("");
        try {
            // TODO add your handling code here:
            String s = "SELECT * FROM MON_HOC";
            DefaultListModel<String> model = new DefaultListModel<>();
            stmt = connect.prepareStatement(s);
            rs = stmt.executeQuery();
            while(rs.next())
            {
                model.addElement(rs.getString("CAUHOI"));
            }
            listQuestion.setModel(model);
            s = "SELECT * FROM GIANG_VIEN";
            stmt = connect.prepareStatement(s);
            rs = stmt.executeQuery();
            while(rs.next())
            {
                model.addElement(rs.getString("CAUHOI"));
            }
            listQuestion.setModel(model);
            s = "SELECT * FROM THONGTIN_QUYCHE";
            stmt = connect.prepareStatement(s);
            rs = stmt.executeQuery();
            while(rs.next())
            {
                model.addElement(rs.getString("CAUHOI"));
            }
            listQuestion.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtFKeyMouseClicked
    
    private void txtFKeyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFKeyKeyPressed
        try {
            String s = "SELECT * FROM MON_HOC";
            DefaultListModel<String> model = new DefaultListModel<>();
            DefaultListModel<String> modelAns = new DefaultListModel<>();
            DefaultListModel<String> modelIma = new DefaultListModel<>();
            listModelAns = new DefaultListModel<>();
            listModelIma = new DefaultListModel<>();
            listModel = new DefaultListModel<>();
            stmt = connect.prepareStatement(s);
            rs = stmt.executeQuery();
            while(rs.next())
            {
                model.addElement(rs.getString("CAUHOI"));
                modelAns.addElement(rs.getString("TRALOI"));
                modelIma.addElement(rs.getString("HINHANH"));
            }
            s = "SELECT * FROM GIANG_VIEN";
            stmt = connect.prepareStatement(s);
            rs = stmt.executeQuery();
            while(rs.next())
            {
                model.addElement(rs.getString("CAUHOI"));
                modelAns.addElement(rs.getString("TRALOI"));
                modelIma.addElement(rs.getString("HINHANH"));
            }
            s = "SELECT * FROM THONGTIN_QUYCHE";
            stmt = connect.prepareStatement(s);
            rs = stmt.executeQuery();
            while(rs.next())
            {
                model.addElement(rs.getString("CAUHOI"));
                modelAns.addElement(rs.getString("TRALOI"));
                modelIma.addElement(rs.getString("HINHANH"));
            }
            for(int i=0; i<model.getSize(); i++){
                if(model.get(i).toUpperCase().indexOf(txtFKey.getText().toUpperCase())!=-1){
                    listModel.addElement(model.get(i));
                    listModelAns.addElement(modelAns.get(i));
                    listModelIma.addElement(modelIma.get(i));
                }
            }
            listQuestion.setModel(listModel);
            
        } catch (SQLException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtFKeyKeyPressed

    private void txtFKeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFKeyKeyReleased
        // TODO add your handling code here:
        txtFKeyKeyPressed(evt);
    }//GEN-LAST:event_txtFKeyKeyReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Answers;
    private javax.swing.JButton Search;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxFind;
    private javax.swing.JComboBox<String> cbxFirst;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbImage;
    private javax.swing.JList<String> listQuestion;
    private javax.swing.JRadioButton radioCategory;
    private javax.swing.JRadioButton rbKey;
    private javax.swing.JTextField txtFKey;
    // End of variables declaration//GEN-END:variables
}
